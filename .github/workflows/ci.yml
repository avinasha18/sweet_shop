# name: CI/CD Pipeline

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]

# jobs:
#   test-backend:
#     runs-on: ubuntu-latest
    
#     services:
#       mongodb:
#         image: mongo:7.0
#         ports:
#           - 27017:27017
#         options: >-
#           --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '18'
#         cache: 'npm'
#         cache-dependency-path: server/package-lock.json
    
#     - name: Install dependencies
#       working-directory: ./server
#       run: npm ci
    
#     - name: Run linting
#       working-directory: ./server
#       run: npm run lint || true
    
#     - name: Run tests
#       working-directory: ./server
#       run: npm test
#       env:
#         NODE_ENV: test
#         MONGO_URI: mongodb://localhost:27017/sweetshop_test
#         JWT_SECRET: test_jwt_secret
#         ACCESS_TOKEN_EXPIRES_IN: 15m
#         REFRESH_TOKEN_EXPIRES_IN: 7d
    
#     - name: Upload coverage reports
#       uses: codecov/codecov-action@v3
#       with:
#         file: ./server/coverage/lcov.info
#         flags: backend

#   test-frontend:
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '18'
#         cache: 'npm'
#         cache-dependency-path: client/package-lock.json
    
#     - name: Install dependencies
#       working-directory: ./client
#       run: npm ci
    
#     - name: Run linting
#       working-directory: ./client
#       run: npm run lint || true
    
#     - name: Run tests
#       working-directory: ./client
#       run: npm test
#       env:
#         CI: true
    
#     - name: Build application
#       working-directory: ./client
#       run: npm run build
#       env:
#         VITE_API_URL: http://localhost:5000/api

#   security-scan:
#     runs-on: ubuntu-latest
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Run Trivy vulnerability scanner
#       uses: aquasecurity/trivy-action@master
#       with:
#         scan-type: 'fs'
#         scan-ref: '.'
#         format: 'sarif'
#         output: 'trivy-results.sarif'
    
#     - name: Upload Trivy scan results
#       uses: github/codeql-action/upload-sarif@v2
#       with:
#         sarif_file: 'trivy-results.sarif'

#   docker-build:
#     runs-on: ubuntu-latest
#     needs: [test-backend, test-frontend]
#     if: github.ref == 'refs/heads/main'
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3
    
#     - name: Login to Docker Hub
#       uses: docker/login-action@v3
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_PASSWORD }}
    
#     - name: Build and push backend image
#       uses: docker/build-push-action@v5
#       with:
#         context: ./server
#         push: true
#         tags: |
#           ${{ secrets.DOCKER_USERNAME }}/sweetshop-backend:latest
#           ${{ secrets.DOCKER_USERNAME }}/sweetshop-backend:${{ github.sha }}
#         cache-from: type=gha
#         cache-to: type=gha,mode=max
    
#     - name: Build and push frontend image
#       uses: docker/build-push-action@v5
#       with:
#         context: ./client
#         push: true
#         tags: |
#           ${{ secrets.DOCKER_USERNAME }}/sweetshop-frontend:latest
#           ${{ secrets.DOCKER_USERNAME }}/sweetshop-frontend:${{ github.sha }}
#         cache-from: type=gha
#         cache-to: type=gha,mode=max

#   deploy:
#     runs-on: ubuntu-latest
#     needs: [docker-build]
#     if: github.ref == 'refs/heads/main'
#     environment: production
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Deploy to production
#       run: |
#         echo "Deploying to production..."
#         # Add your deployment script here
#         # This could be deploying to AWS, GCP, Azure, or any other cloud provider
